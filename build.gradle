///apply plugin: 'java'
apply plugin: 'application'

sourceCompatibility = '1.17'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

group   = 'org.audiveris'
version = '1.1.0'

ext.programName    = "${rootProject.name}"

ext.dl4jVersion = '1.0.0-beta6'
ext.nd4jVersion = '1.0.0-beta6'

//ext.jcppVersion = '1.5.2'

// this code is required in order to adapt values of os.name and os.arch to the
// conventions used by Javacpp's dependencies
ext.targetOSName   = System.getProperty('os.name').toLowerCase()\
                     .startsWith('mac os x') ? 'macosx' :\
                     System.getProperty('os.name').split(' ')[0].toLowerCase()
ext.targetOSArch   = ["i386":"x86", "i486":"x86", "i586":"x86", "i686":"x86", "x86":"x86",
                      "amd64":"x86_64", "x86-64":"x86_64", "x86_64":"x86_64", "arm":"armhf"]\
                     [System.getProperty('os.arch').toLowerCase()]
ext.targetOS       = "${project.ext.targetOSName}-${project.ext.targetOSArch}"
println "targetOS=${project.ext.targetOS}"

// Ability to set a different main class
if (!hasProperty('mainClass')) {
    ext.mainClass = 'org.audiveris.omrdataset.Main'
}
mainClassName = ext.mainClass

// Useful for turning on deprecation warnings
// Just uncomment the appropriate option
allprojects {
    tasks.withType(JavaCompile) {
        //options.compilerArgs << "-Xlint:deprecation"
        //options.compilerArgs << "-Xlint:unchecked"
    }
}

run {
    minHeapSize = '512m'
    maxHeapSize = '4g'
    
    // Retrieve CLI arguments from cmdLineArgs property if any
    if (project.hasProperty("cmdLineArgs")) {
        if (cmdLineArgs) {
            args(cmdLineArgs.split(','))
        }
    }

    // Retrieve JVM arguments from jvmLineArgs property if any
    if (project.hasProperty("jvmLineArgs")) {
        if (jvmLineArgs) {
            jvmArgs(jvmLineArgs.split(','))
        }
    }
}

// Workaround for "CreateProcess error=206, The filename or extension is too long" under Windows
// See https://github.com/viswaramamoorthy/gradle-util-plugins/
buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "gradle.plugin.com.github.viswaramamoorthy:gradle-util-plugins:0.1.0-RELEASE"
  }
}
apply plugin: "com.github.ManifestClasspath"

repositories {
    mavenCentral()
    mavenLocal()
    //flatDir(dirs: 'dev/externals') // for libraries not in any other repository
}

// Declare Lombok appropriately to avoid deprecation warnings in Gradle >= 4.6
dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'
}

dependencies {
    implementation(
        [group: 'org.jfree', name: 'jfreechart', version: '1.0.19'],
        [group: 'org.kohsuke', name: 'github-api', version: '1.99'],
        [group: 'args4j', name: 'args4j', version: '2.33'],
        [group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'],
        [group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'],
        [group: 'org.deeplearning4j', name: 'deeplearning4j-core', version: "${project.ext.dl4jVersion}"],
        [group: 'org.deeplearning4j', name: 'deeplearning4j-ui', version: "${project.ext.dl4jVersion}"],
        [group: 'org.nd4j', name: 'nd4j-native', version: "${project.ext.nd4jVersion}"],
        [group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'],
        [group: 'com.sun.xml.bind', name: 'jaxb-core', version: '2.3.0.1'],
        [group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.3.1'],
        [group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.1']
    )
    
    runtimeOnly(
        [group: 'org.nd4j', name: 'nd4j-native', version: "${project.ext.nd4jVersion}", classifier: "${project.ext.targetOS}"]
    ) 
    
    testImplementation(
        [ group: 'junit', name: 'junit', version: '4.10']
    )    
}

// Avoid JDK8 too strict javadoc
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

javadoc {
    doFirst {
        copy {
            from "src/main/java/org/audiveris/omrdataset"
            into "$buildDir/docs/javadoc/org/audiveris/omrdataset"
            include ("*/doc-files/**")
        }
    }
    title = "${project.ext.programName}-${version} API"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
